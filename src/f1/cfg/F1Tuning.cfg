#!/usr/bin/env python
# -*- coding: utf-8 -*-

#57s版本，fastx3版本的TEB参数

PACKAGE = 'f1'  # 你的包名

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# ------------------- A: 核心FTG算法参数组 (FTG Algorithm) -------------------
ftg_group = gen.add_group("A_FTG_Core_Algorithm", type="tab", state=True)

ftg_group.add("bubble_radius",        int_t, 0, "安全气泡半径 (点数): 越大越安全, 但可能无法通过窄路", 180, 0, 900)
ftg_group.add("preprocess_conv_size", int_t, 0, "雷达平滑窗口 (点数): 越大行驶越平顺, 但对环境变化反应变慢", 40, 0, 200)
ftg_group.add("best_point_conv_size", int_t, 0, "最佳目标点平滑窗口 (点数): 越大目标点越稳定, 倾向于间隙中心", 80, 0, 200)


# ------------------- B: 车辆控制参数组 (Vehicle Control) -------------------
control_group = gen.add_group("B_Vehicle_Control", type="tab", state=True)

# 通用控制参数
control_group.add("max_lidar_dist", double_t, 0, "最大雷达'视野' (米): 越大越有前瞻性, 越小越专注眼前", 7.0,    1.0, 20.0)
control_group.add("desired_fov",     double_t, 0, "前方视野角度 (度): 决定处理多少度的雷达数据",       180.0,  90.0, 270.0)


# --- C: 层级1 (高速直行) ---
tier1_group = gen.add_group("Tier_1")
tier1_group.add("angle_thresh_1", double_t, 0, "阈值 (定义直行结束)", 10.0, 0.0, 90.0)
tier1_group.add("speed_tier_1", double_t, 0, "层级1: 速度 (米/秒)", 4.0, 0.5, 8.0)
tier1_group.add("gain_tier_1",  double_t, 0, "层级1: 转向增益",    0.15, 0.0, 10)



# --- D: 层级2 (中速缓弯) ---
tier2_group = gen.add_group("Tier_2")
tier2_group.add("angle_thresh_2", double_t, 0, "阈值 (定义缓弯结束)", 15.0, 0.0, 90.0)
tier2_group.add("speed_tier_2", double_t, 0, "层级2: 速度 (米/秒)", 3.0, 0.5, 8.0)
tier2_group.add("gain_tier_2",  double_t, 0, "层级2: 转向增益",    0.3, 0.0, 10)



# --- E: 层级3 (低速急弯) ---
tier3_group = gen.add_group("Tier_3")
tier3_group.add("angle_thresh_3", double_t, 0, "阈值 (定义急弯结束)", 35.0, 0.0, 90.0)
tier3_group.add("speed_tier_3", double_t, 0, "层级3: 速度 (米/秒)", 2.5, 0, 8.0)
tier3_group.add("gain_tier_3",  double_t, 0, "层级3: 转向增益",    0.4, 0.0, 10)



# --- F: 层级4 (极低速发夹弯) ---
tier4_group = gen.add_group("Tier_4")
tier4_group.add("speed_tier_4", double_t, 0, "层级4: 速度 (米/秒)", 1.5, -1, 8.0)
tier4_group.add("gain_tier_4",  double_t, 0, "层级4: 转向增益",    0.5, 0.0, 10)


# =================================================================================
# 生成配置文件
exit(gen.generate(PACKAGE, "ftg_node", "F1Tuning"))